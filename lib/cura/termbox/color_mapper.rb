if Kernel.respond_to?(:require)
  require "termbox"
end

module Cura
  module Termbox
    
    # A cached map comparing a color's rgb values with the 256 terminal color codes.
    module ColorMapper
      
      COLOR_CODES = {
        0 => [1000, 1000, 1000], # Default. Random large numbers for least likely chance of a match for #terminal_code
        1 => [0, 0, 0],
        2 => [128, 0, 0],
        3 => [0, 128, 0],
        4 => [128, 128, 0],
        5 => [0, 0, 128],
        6 => [128, 0, 128],
        7 => [0, 128, 128],
        8 => [192, 192, 192],
        
        # 0 => [0, 0, 0],
        # 1 => [128, 0, 0],
        # 2 => [0, 128, 0],
        # 3 => [128, 128, 0],
        # 4 => [0, 0, 128],
        # 5 => [128, 0, 128],
        # 6 => [0, 128, 128],
        # 7 => [192, 192, 192],
        # 8 => [128, 128, 128], # TODO: What about this guy? Just gone? =(
        9   => [255, 0, 0],
        10  => [0, 255, 0],
        11  => [255, 255, 0],
        12  => [0, 0, 255],
        13  => [255, 0, 255],
        14  => [0, 255, 255],
        15  => [255, 255, 255],
        16  => [0, 0, 0],
        17  => [0, 0, 95],
        18  => [0, 0, 135],
        19  => [0, 0, 175],
        20  => [0, 0, 223],
        21  => [0, 0, 255],
        22  => [0, 95, 0],
        23  => [0, 95, 95],
        24  => [0, 95, 135],
        25  => [0, 95, 175],
        26  => [0, 95, 223],
        27  => [0, 95, 255],
        28  => [0, 135, 0],
        29  => [0, 135, 95],
        30  => [0, 135, 135],
        31  => [0, 135, 175],
        32  => [0, 135, 223],
        33  => [0, 135, 255],
        34  => [0, 175, 0],
        35  => [0, 175, 95],
        36  => [0, 175, 135],
        37  => [0, 175, 175],
        38  => [0, 175, 223],
        39  => [0, 175, 255],
        40  => [0, 223, 0],
        41  => [0, 223, 95],
        42  => [0, 223, 135],
        43  => [0, 223, 175],
        44  => [0, 223, 223],
        45  => [0, 223, 255],
        46  => [0, 255, 0],
        47  => [0, 255, 95],
        48  => [0, 255, 135],
        49  => [0, 255, 175],
        50  => [0, 255, 223],
        51  => [0, 255, 255],
        52  => [95, 0, 0],
        53  => [95, 0, 95],
        54  => [95, 0, 135],
        55  => [95, 0, 175],
        56  => [95, 0, 223],
        57  => [95, 0, 255],
        58  => [95, 95, 0],
        59  => [95, 95, 95],
        60  => [95, 95, 135],
        61  => [95, 95, 175],
        62  => [95, 95, 223],
        63  => [95, 95, 255],
        64  => [95, 135, 0],
        65  => [95, 135, 95],
        66  => [95, 135, 135],
        67  => [95, 135, 175],
        68  => [95, 135, 223],
        69  => [95, 135, 255],
        70  => [95, 175, 0],
        71  => [95, 175, 95],
        72  => [95, 175, 135],
        73  => [95, 175, 175],
        74  => [95, 175, 223],
        75  => [95, 175, 255],
        76  => [95, 223, 0],
        77  => [95, 223, 95],
        78  => [95, 223, 135],
        79  => [95, 223, 175],
        80  => [95, 223, 223],
        81  => [95, 223, 255],
        82  => [95, 255, 0],
        83  => [95, 255, 95],
        84  => [95, 255, 135],
        85  => [95, 255, 175],
        86  => [95, 255, 223],
        87  => [95, 255, 255],
        88  => [135, 0, 0],
        89  => [135, 0, 95],
        90  => [135, 0, 135],
        91  => [135, 0, 175],
        92  => [135, 0, 223],
        93  => [135, 0, 255],
        94  => [135, 95, 0],
        95  => [135, 95, 95],
        96  => [135, 95, 135],
        97  => [135, 95, 175],
        98  => [135, 95, 223],
        99  => [135, 95, 255],
        100 => [135, 135, 0],
        101 => [135, 135, 95],
        102 => [135, 135, 135],
        103 => [135, 135, 175],
        104 => [135, 135, 223],
        105 => [135, 135, 255],
        106 => [135, 175, 0],
        107 => [135, 175, 95],
        108 => [135, 175, 135],
        109 => [135, 175, 175],
        110 => [135, 175, 223],
        111 => [135, 175, 255],
        112 => [135, 223, 0],
        113 => [135, 223, 95],
        114 => [135, 223, 135],
        115 => [135, 223, 175],
        116 => [135, 223, 223],
        117 => [135, 223, 255],
        118 => [135, 255, 0],
        119 => [135, 255, 95],
        120 => [135, 255, 135],
        121 => [135, 255, 175],
        122 => [135, 255, 223],
        123 => [135, 255, 255],
        124 => [175, 0, 0],
        125 => [175, 0, 95],
        126 => [175, 0, 135],
        127 => [175, 0, 175],
        128 => [175, 0, 223],
        129 => [175, 0, 255],
        130 => [175, 95, 0],
        131 => [175, 95, 95],
        132 => [175, 95, 135],
        133 => [175, 95, 175],
        134 => [175, 95, 223],
        135 => [175, 95, 255],
        136 => [175, 135, 0],
        137 => [175, 135, 95],
        138 => [175, 135, 135],
        139 => [175, 135, 175],
        140 => [175, 135, 223],
        141 => [175, 135, 255],
        142 => [175, 175, 0],
        143 => [175, 175, 95],
        144 => [175, 175, 135],
        145 => [175, 175, 175],
        146 => [175, 175, 223],
        147 => [175, 175, 255],
        148 => [175, 223, 0],
        149 => [175, 223, 95],
        150 => [175, 223, 135],
        151 => [175, 223, 175],
        152 => [175, 223, 223],
        153 => [175, 223, 255],
        154 => [175, 255, 0],
        155 => [175, 255, 95],
        156 => [175, 255, 135],
        157 => [175, 255, 175],
        158 => [175, 255, 223],
        159 => [175, 255, 255],
        160 => [223, 0, 0],
        161 => [223, 0, 95],
        162 => [223, 0, 135],
        163 => [223, 0, 175],
        164 => [223, 0, 223],
        165 => [223, 0, 255],
        166 => [223, 95, 0],
        167 => [223, 95, 95],
        168 => [223, 95, 135],
        169 => [223, 95, 175],
        170 => [223, 95, 223],
        171 => [223, 95, 255],
        172 => [223, 135, 0],
        173 => [223, 135, 95],
        174 => [223, 135, 135],
        175 => [223, 135, 175],
        176 => [223, 135, 223],
        177 => [223, 135, 255],
        178 => [223, 175, 0],
        179 => [223, 175, 95],
        180 => [223, 175, 135],
        181 => [223, 175, 175],
        182 => [223, 175, 223],
        183 => [223, 175, 255],
        184 => [223, 223, 0],
        185 => [223, 223, 95],
        186 => [223, 223, 135],
        187 => [223, 223, 175],
        188 => [223, 223, 223],
        189 => [223, 223, 255],
        190 => [223, 255, 0],
        191 => [223, 255, 95],
        192 => [223, 255, 135],
        193 => [223, 255, 175],
        194 => [223, 255, 223],
        195 => [223, 255, 255],
        196 => [255, 0, 0],
        197 => [255, 0, 95],
        198 => [255, 0, 135],
        199 => [255, 0, 175],
        200 => [255, 0, 223],
        201 => [255, 0, 255],
        202 => [255, 95, 0],
        203 => [255, 95, 95],
        204 => [255, 95, 135],
        205 => [255, 95, 175],
        206 => [255, 95, 223],
        207 => [255, 95, 255],
        208 => [255, 135, 0],
        209 => [255, 135, 95],
        210 => [255, 135, 135],
        211 => [255, 135, 175],
        212 => [255, 135, 223],
        213 => [255, 135, 255],
        214 => [255, 175, 0],
        215 => [255, 175, 95],
        216 => [255, 175, 135],
        217 => [255, 175, 175],
        218 => [255, 175, 223],
        219 => [255, 175, 255],
        220 => [255, 223, 0],
        221 => [255, 223, 95],
        222 => [255, 223, 135],
        223 => [255, 223, 175],
        224 => [255, 223, 223],
        225 => [255, 223, 255],
        226 => [255, 255, 0],
        227 => [255, 255, 95],
        228 => [255, 255, 135],
        229 => [255, 255, 175],
        230 => [255, 255, 223],
        231 => [255, 255, 255],
        232 => [8, 8, 8],
        233 => [18, 18, 18],
        234 => [28, 28, 28],
        235 => [38, 38, 38],
        236 => [48, 48, 48],
        237 => [58, 58, 58],
        238 => [68, 68, 68],
        239 => [78, 78, 78],
        240 => [88, 88, 88],
        241 => [96, 96, 96],
        242 => [102, 102, 102],
        243 => [118, 118, 118],
        244 => [128, 128, 128],
        245 => [138, 138, 138],
        246 => [148, 148, 148],
        247 => [158, 158, 158],
        248 => [168, 168, 168],
        249 => [178, 178, 178],
        250 => [188, 188, 188],
        251 => [198, 198, 198],
        252 => [208, 208, 208],
        253 => [218, 218, 218],
        254 => [228, 228, 228],
        255 => [238, 238, 238]
      }
      
      CACHE = {}
      
      class << self
        # Find the closest terminal color code from the given RGB values.
        #
        # @param [#to_i] number_of_colors The number of colors in the code list to search. 9 is Termbox without 256 colors enabled I.E. 3-bit.
        # @return [Integer]
        def code(color, number_of_colors=256)
          rgb = [color.red, color.green, color.blue]
          code = CACHE[rgb]
          
          if code.nil?
            code = find_closest_code(rgb, number_of_colors)
            
            CACHE[rgb] = code
          end
          
          code
        end
        
        protected
        
        def find_closest_code(rgb, number_of_colors=256)
          color_codes = COLOR_CODES.first(number_of_colors.to_i).each_with_object({}) do |code, memo|
            memo[code[0]] = code[-1]
          end
          
          last = nil
          color_codes.each do |code, color|
            difference = compare_rgb_array(rgb, color)
            
            last = { difference: difference, code: code } if last.nil? || difference < last[:difference]
          end
          
          last.nil? ? nil : last[:code]
        end
        
        def compare_rgb_array(a1, a2)
          total = 0
          
          a1.each_index do |x|
            total += (a1[x] - a2[x]).abs
          end
          
          total
        end
      end
      
    end
    
  end
end
